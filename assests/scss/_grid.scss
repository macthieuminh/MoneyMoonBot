@use "sass:map";
@use "sass:math";
// Grid Breakpoints & Container Widths
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
);
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px,
);
$grid-columns: 12;
$grid-gutter-width: 30px !default;
// Gutters
$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);
%gutter-padding {
    padding-left: $grid-gutter-width * 0.5;
    padding-right: $grid-gutter-width * 0.5;
}
// Container
.container-fluid {
    width: 100%;

    margin-left: auto;
    margin-right: auto;

    @extend %gutter-padding;
}
.container {
    @extend .container-fluid;
}
.row {
    display: flex;
    flex-wrap: wrap;

    margin-left: -calc($grid-gutter-width * 0.5);
    margin-right: -calc($grid-gutter-width * 0.5);

    &[class*="row-cols-"] > *,
    [class*="col-"] {
        flex: 0 0 auto;
        @extend %gutter-padding;
    }

    > * {
        margin-top: var(--grid-gutter-y);
    }
}
.col {
    flex: 1 0;

    @extend %gutter-padding;
}
// Mixins
@mixin make-media-query($dimension, $bypass: false) {
    @if $bypass {
        @content;
    } @else {
        @media (min-width: $dimension) {
            @content;
        }
    }
}
@mixin make-container-max-widths($breakpoint) {
    @each $container, $dimension in $container-max-widths {
        @if (#{$container} == #{$breakpoint}) {
            max-width: $dimension;
        }
    }
}
@mixin make-row-columns($infix) {
    @for $i from 1 through $grid-columns {
        .row-cols#{$infix}-#{$i} > * {
            width: math.div(100%, $i);
        }
    }
}
@mixin make-columns($infix) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}
@mixin make-offset($infix) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
        }
    }
}
@mixin make-gutters($infix) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i},
        .gx#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
        }

        .g#{$infix}-#{$i},
        .gy#{$infix}-#{$i} {
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}
// Grid Parts
// Each
@each $breakpoint, $dimension in $grid-breakpoints {
    $isXS: if($breakpoint == xs, true, false);
    $infix: if($isXS, "", "-#{$breakpoint}");
    $max-width: map.get(
        $map: $container-max-widths,
        $key: $breakpoint,
    );

    @include make-media-query($dimension, $isXS) {
        .container {
            max-width: $max-width;
        }
        @include make-row-columns($infix);
        @include make-columns($infix);
        @include make-offset($infix);
        @include make-gutters($infix);
    }
}
